{
	// Place your advent_of_code workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"AOC Day Setup": {
		"scope": "rust",
		"prefix": "aoc",
		"body": [
			"use aoc_derive::{aoc, aoc_input};",
			"",
			"#[aoc_input(day${0:num})]",
			"fn parse(input: &str) -> Result<Vec<SOME_TYPE>, String> {",
			"input.lines().map(|l| l.parse()).collect()",
			"}",
			"",
			"#[aoc(day${0:num}, part1)]",
			"fn part1(input: &[String]) -> u32 {",
			"0",
			"}",
			"",
			"#[aoc(day${0:num}, part2)]",
			"fn part2(input: &[String]) -> u32 {",
			"0",
			"}",
			"",
			"#[cfg(test)]",
			"mod tests {",
			"use super::*;",
			"",
			"const INPUT: &str = \"\";",
			"",
			"#[test]",
			"fn test_part1() {",
			"let entries = parse(INPUT).unwrap();",
			"assert_eq!(part1(&entries), 0);",
			"}",
			"",
			"#[test]",
			"fn test_part2() {",
			"let entries = parse(INPUT).unwrap();",
			"assert_eq!(part2(&entries), 0);",
			"}",
			"}",
		],
		"description": "Set up a new AOC day."
	}
}
